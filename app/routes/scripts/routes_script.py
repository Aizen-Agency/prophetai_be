import os
import uuid
from random import choice
from flask import Blueprint, Flask, jsonify, request
from flask_cors import CORS
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
from sqlalchemy.exc import SQLAlchemyError
from dotenv import load_dotenv
from app.models.userData import User
from app.models.scriptsModel import Script
import jwt
from datetime import datetime, timedelta
from app.controllers.chat_gpt.script_generation import generate_scripts_with_chatgpt
from app.controllers.chat_gpt.script_idea import generate_script_ideas
from app.models.insights import Insights

load_dotenv()

api_scripts = Blueprint("scripts", __name__, url_prefix="")

@api_scripts.route('/generate-scripts', methods=['POST'])
def generate_script():
    try:
        data = request.get_json()
        
        # Validate request data
        if not data:
            return jsonify({"error": "No data provided"}), 400
            
        # Extract and validate required fields
        required_fields = ['product_name', 'description', 'script_idea']
        for field in required_fields:
            if field not in data or not data[field]:
                return jsonify({"error": f"Missing or empty required field: {field}"}), 400

        # Extract data
        product_name = data['product_name']
        description = data['description']
        link = data.get('link')
        script_idea = data['script_idea']
        user_id = data.get('user_id')
        transcript = data.get('transcript')
        
        # Get twitter_content from data
        twitter_content = data.get('twitter_content')
        articles_scraped = len(twitter_content.get('tweets', [])) if twitter_content else 0

        # Generate scripts using ChatGPT
        twitter_posts = ""
        if twitter_content and 'tweets' in twitter_content:
            # Format tweets into a string
            tweets = twitter_content.get('tweets', [])
            for tweet in tweets:
                twitter_posts += f"Tweet: {tweet.get('text', '')}\n\n"
        
        script_variations = generate_scripts_with_chatgpt(product_name, description, script_idea, twitter_posts)

        # Update insights table with scripts generated count
        if user_id:
            print(f"[DEBUG] User ID: {user_id}")
            insights = Insights.get_by_user(user_id)
            if not insights:
                print("[DEBUG] No existing insights found, creating new one.")
                insights = Insights(user_id=user_id)
                insights.save()
            
            # Determine the current month
            current_month = datetime.now().strftime('%b').lower()
            print(f"[DEBUG] Current month: {current_month}")
            
            # Log insights before update
            print(f"[DEBUG] Insights before update: {insights}")
            
            # Increment scripts_generated by 5 (since we always generate 5 scripts)
            insights.update_monthly_data(current_month, scripts=5)
            
            # Update insights with articles scraped if available
            if articles_scraped > 0:
                insights.update_monthly_data(current_month, articles=articles_scraped)
                print(f"[DEBUG] Updated insights with {articles_scraped} articles scraped")
            
            # Log insights after update
            updated_insights = Insights.get_by_user(user_id)
            print(f"[DEBUG] Insights after update: {updated_insights}")

        return jsonify({
            "message": "Scripts generated successfully",
            "scripts": script_variations,
            "articles_scraped": articles_scraped
        }), 200

    except Exception as e:
        print(f"[ERROR] {str(e)}")
        return jsonify({"error": "An unexpected error occurred"}), 500



@api_scripts.route('/generate-script-idea', methods=['POST'])
def generate_script_idea():
    try:
        data = request.get_json()
        
        # Validate request data
        if not data:
            return jsonify({"error": "No data provided"}), 400
            
        # Extract and validate required fields
        required_fields = ['product_name', 'description', 'script_idea', 'user_id']
        for field in required_fields:
            if field not in data or not data[field]:
                return jsonify({"error": f"Missing or empty required field: {field}"}), 400

        # Extract data
        product_name = data['product_name']
        description = data['description']
        link = data.get('link')
        script_idea = data['script_idea']
        user_id = data['user_id']
        
        # Get twitter_content from frontend if available
        twitter_content = data.get('twitter_content')
        articles_scraped = len(twitter_content.get('tweets', [])) if twitter_content else 0

        print(f"[DEBUG] User ID: {user_id}, Link: {link}")

        # If we have twitter content from frontend, update insights
        # if twitter_content and articles_scraped > 0:
        #     print(f"[DEBUG] Using provided Twitter content with {articles_scraped} tweets")
            
        #     # Update insights with the provided articles count
        #     insights = Insights.get_by_user(user_id)
        #     if not insights:
        #         insights = Insights(user_id=user_id)
        #         insights.save()
            
        #     # Determine the current month
        #     current_month = datetime.now().strftime('%b').lower()
            
        #     # Update monthly data
        #     insights.update_monthly_data(current_month, articles=articles_scraped)
        #     print(f"[DEBUG] Updated insights in database with {articles_scraped} articles")

        # Generate script ideas using the new controller
        response = generate_script_ideas(
            product_name=product_name,
            description=description,
            script_idea=script_idea,
            twitter_content=twitter_content,
        )

        if 'error' in response:
            print(f"[ERROR] Script idea generation failed: {response['error']}")
            # Add debug logging for the raw response
            if 'raw_response' in response:
                print(f"[DEBUG] Raw ChatGPT response: {response['raw_response']}")
            return jsonify(response), 500

        # Add idea_id to the response
        response['idea_title'] = product_name
        response['articles_scraped'] = articles_scraped

        print(f"[DEBUG] Successfully generated {len(response.get('ideas', []))} script ideas")
        return jsonify(response), 200

    except Exception as e:
        print(f"[ERROR] {str(e)}")
        return jsonify({"error": "An unexpected error occurred"}), 500

        
@api_scripts.route('/generate-multiple-idea', methods=['POST'])
def generateMultipleIdeas():
    try:
        data = request.get_json()
        
        # Validate request data
        if not data:
            return jsonify({"error": "No data provided"}), 400
            
        # Extract and validate required fields
        required_fields = ['product_name', 'description', 'script_idea']
        for field in required_fields:
            if field not in data or not data[field]:
                return jsonify({"error": f"Missing or empty required field: {field}"}), 400

        # Extract data
        product_name = data['product_name']
        description = data['description']
        link = data['link']
        script_idea = data['script_idea']

        # Generate 6 variations of script ideas
        script_variations = [
            {
                'id': 'copy1',
                'title': f"(Instagram Reels Copy 1)",
                'content': f"""[Upbeat music starts]
👋 Hey creators! Tired of staring at blank screens?
🤖 Meet {product_name}, your new content bestie!
💡 {description}
📱 {script_idea}
🎨 Learns your style, sounds like you!
🔍 SEO optimized for more views!
🚀 Boost productivity, save time!
😎 User-friendly, no tech wizardry needed!
🔥 Say bye to writer's block, hello to wow content!
🌟 Try {product_name} now!
[Call to action: Swipe up to revolutionize your content game!]
#ContentCreation #AIAssistant #{product_name.replace(' ', '')}""",
                'date': datetime.now().isoformat()
            },
            {
                'id': 'copy2',
                'title': f"(Instagram Reels Copy 2)",
                'content': f"""[Energetic beat drops]
🎭 Content creators, listen up!
😓 Struggling with writer's block?
🚀 Introducing {product_name}!
⚡ {description}
🧠 Learns your unique style
📊 SEO optimization built-in
⏱️ Save hours on content creation
🌈 Multiple formats, one tool
💪 Empower your creativity
🔥 Stand out in the digital noise
[Visual: "Try {product_name} Free" button appears]
Don't miss out on the future of content creation!
#{product_name.replace(' ', '')} #ContentRevolution #CreatorTools""",
                'date': datetime.now().isoformat()
            },
            {
                'id': 'copy3',
                'title': f"(Instagram Reels Copy 3)",
                'content': f"""[Upbeat electronic music]
👀 Attention all content creators!
🤯 Feeling overwhelmed by content demands?
🦸‍♀️ {product_name} to the rescue!
🎨 {description}
⚡ Lightning-fast creation process
📈 Built-in SEO for maximum reach
🔄 Adapts to your style over time
💡 Never run out of ideas again
🚀 Skyrocket your content strategy
✨ Unlock your creative potential
[Text overlay: "Join the AI content revolution"]
Transform your content game with {product_name}!
#AIContentCreation #DigitalMarketing #{product_name.replace(' ', '')}""",
                'date': datetime.now().isoformat()
            },
            {
                'id': 'copy4',
                'title': f"(Instagram Reels Copy 4)",
                'content': f"""[Soft, inspiring background music]
📝 Content creation got you stressed?
😴 Tired of late nights brainstorming?
🌟 Meet {product_name} - your creative companion
🧠 AI-powered content generation
🎯 Tailored to your brand voice
📊 SEO-optimized for better reach
⏰ Save time, boost productivity
🔍 Never struggle for ideas again
💪 Empower your content strategy
🚀 Take your brand to new heights
[Visual: "Start your free trial" CTA]
Experience the future of content creation now!
#ContentCreation #AITechnology #{product_name.replace(' ', '')}""",
                'date': datetime.now().isoformat()
            },
            {
                'id': 'copy5',
                'title': f"(Instagram Reels Copy 5)",
                'content': f"""[Upbeat, motivational music]
🎭 Calling all content creators!
😓 Exhausted from constant content demands?
💡 Discover {product_name}
🚀 Revolutionize your content strategy
⚡ Generate ideas in seconds
📝 Create blogs, social posts, and more
🧠 AI learns and adapts to your style
📈 Built-in SEO for maximum impact
⏳ Save time, reduce stress
🌈 Unleash your creative potential
[Text appears: "Join the AI content revolution"]
Level up your content game with {product_name}!
#AIContentCreator #DigitalMarketing #{product_name.replace(' ', '')}""",
                'date': datetime.now().isoformat()
            },
            {
                'id': 'copy6',
                'title': f"(Instagram Reels Copy 6)",
                'content': f"""[Dynamic, energetic music]
👋 Hey there, content creators!
😪 Tired of content creation burnout?
🦸 {product_name} is here to save the day!
🧠 AI-powered content generation
🎨 Maintains your unique brand voice
📊 SEO-optimized for better visibility
⚡ Create content in minutes, not hours
📱 Perfect for social media, blogs, and more
🚀 Boost your productivity and reach
💪 Stay ahead of the competition
[Visual: "Try {product_name} Now" button]
Revolutionize your content strategy today!
#ContentCreation #AIAssistant #{product_name.replace(' ', '')}""",
                'date': datetime.now().isoformat()
            }
        ]

        return jsonify({
            "message": "Script ideas generated successfully",
            "scripts": script_variations
        }), 200

    except Exception as e:
        print(f"[ERROR] {str(e)}")
        return jsonify({"error": "An unexpected error occurred"}), 500

@api_scripts.route('/update-insights', methods=['POST'])
def update_insights():
    try:
        data = request.get_json()
        
        # Validate request data
        if not data:
            return jsonify({"error": "No data provided"}), 400
            
        # Extract and validate required fields
        required_fields = ['user_id', 'articles_scraped']
        for field in required_fields:
            if field not in data:
                return jsonify({"error": f"Missing required field: {field}"}), 400

        # Extract data
        user_id = data['user_id']
        articles_scraped = data['articles_scraped']

        # Update insights table
        insights = Insights.get_by_user(user_id)
        if not insights:
            insights = Insights(user_id=user_id)
            insights.save()
        
        # Determine the current month
        current_month = datetime.now().strftime('%b').lower()
        
        # Update monthly data with the number of articles scraped
        insights.update_monthly_data(current_month, articles=articles_scraped)
        
        return jsonify({
            "message": "Insights updated successfully",
            "articles_scraped": articles_scraped
        }), 200

    except Exception as e:
        print(f"[ERROR] {str(e)}")
        return jsonify({"error": "An unexpected error occurred"}), 500
